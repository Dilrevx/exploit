str_const = r'J8ITC7oaC7ofwTEbACM9zD4mC7oayqY9C7o9Kd=='.encode() # 最终结果按 str_const 的长度进行比较
cipher = r'ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba9876543210+/'.encode()

print(len(str_const))

def encrypt(s: str):
    '''
    process 3-input and give 4-output, out_len = in_len * 4 / 3 (round up)
    '''

    if isinstance(s, str):
        s = s.encode()
    s: bytes

    padding_len = (3 - len(s) % 3) % 3

    s += b'\x00' * padding_len
    groups = [s[i:i+3] for i in range(0, len(s), 3)]

    ret = bytearray()
    for group in groups:
        c, nc, nnc = group
        mix = (nc << 8) + (c << 16) + nnc

        buf = bytearray(4)
        buf[0] = cipher[(mix >> 18) & 0x3F]
        buf[1] = cipher[(mix >> 12) & 0x3F]
        buf[2] = cipher[(mix >> 6) & 0x3F]
        buf[3] = cipher[mix & 0x3F]

        ret += buf
    
    for i in range(0, padding_len):
        ret[len(ret) - i -1 ] = 61 # '='
    return ret

def decrypt(s: str):
    '''
    process 4-input and give 3-output, out_len = in_len * 3 / 4
    '''

    if isinstance(s, str):
        s = s.encode()
    s: bytes

    assert len(s) % 4 == 0

    padding_len = s.count(b'=')

    groups = [s[i:i+4] for i in range(0, len(s) - padding_len, 4)]

    ret = bytearray()
    for group in groups:
        c, nc, nnc, nnnc = group
        try:
            mix = (cipher.index(c) << 18) + (cipher.index(nc) << 12) + (cipher.index(nnc) << 6) + cipher.index(nnnc)

            buf = bytearray(3)
            buf[0] = (mix >> 16) & 0xFF
            buf[1] = (mix >> 8) & 0xFF
            buf[2] = mix & 0xFF

            ret += buf
        except:
            # == 
            mix = sum([cipher.index(c) << (18 - i * 6) for i, c in enumerate(group) if c != 61])

            buf = bytearray([mix >> (16 - i * 8) & 0xFF for i in range(3)])
            ret += buf

    return ret[:-padding_len]

print(decrypt(str_const))