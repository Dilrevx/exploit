import hashlib
import string
from itertools import product
import pickle
from typing import Dict

# from CNN import test


def crackPow(fmtStr: str):
    # fmtStr = "PoW Challenge: SHA256(solution + 'challenge') must start with 'prefix'."
    _, challenge, _, prefix, _ = fmtStr.split("'")
    charSet = string.digits + string.ascii_lowercase
    searchSpace = (
        "".join(char) for char in product(charSet, repeat=64 - len(challenge))
    )

    for solution in searchSpace:
        hash = hashlib.sha256((solution + challenge).encode()).hexdigest()
        if hash.startswith(prefix):
            print(f"Solution found: {solution}")
            return solution


import base64
from PIL import Image, ImageTk
import tkinter as tk
import socket
from pwn import *


def getRoundImg(sh: process) -> bytes:
    sh.recvline_startswith("Round")
    base64Img = sh.recvline(keepends=False)
    img = base64.b64decode(base64Img)
    return img


def displayImg(imgPath: str):
    import subprocess

    subprocess.run(['code', imgPath])


def checkRealImg(cacheDir="cache-rev", update=False, kv=dict(), display = False) -> Dict[str, bool]:
    picklePath = f"{cacheDir}/hash2real.pkl"
    hash2real = {}
    if os.path.exists(picklePath):
        with open(picklePath, "rb") as f:
            hash2real = pickle.load(f)
    if update:
        hash2real.update(kv)
    try:
        for img in os.listdir(cacheDir):
            if not img.endswith(".png"):
                continue

            hash = img[:-4]
            if hash not in hash2real:
                hash2real[hash] = None
            if display:
                displayImg(f"{cacheDir}/{img}")

                isReal = input("AI says it's {}, what do you think?".format(hash2real[hash])).strip().capitalize()
                assert isReal in ["Y", "N", '-']
                hash2real[hash] = isReal == "Y"
                if isReal == '-':
                    with open('{}/uncertain.txt'.format(cacheDir), 'a') as f:
                        f.write(f"{hash}\n")
            
            assert hash2real is not None
    except Exception as e:
        print(e)
    finally:
        with open(picklePath, "wb") as f:
            pickle.dump(hash2real, f)
    return hash2real


print((checkRealImg(display=False)))


def main():
    cacheDir = "cache-rev"
    os.makedirs(cacheDir, exist_ok=True)

    def getProxySocket(ncCmd: str):
        host, domain, port = ncCmd.split()[4:]
        socket_ = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        hh, hp = host.split(":")
        socket_.connect((hh, int(hp)))

        connect_request = "CONNECT {h}:{p} HTTP/1.1\r\nHost: {h}:{p}\r\n\r\n".format(
            h=domain, p=port
        )
        socket_.sendall(connect_request.encode())

        # print(socket_.recv(1024).decode())
        assert (
            socket_.recv(1024).decode().startswith("HTTP/1.1 200")
        ), "Proxy connection failed."
        # socket_.recv(1024)
        return socket_

    db = checkRealImg()
    ncCmd = "nc -X connect -x instance.penguin.0ops.sjtu.cn:18081 hy8jmb9ketcqxk66 1"
    socket_ = getProxySocket(ncCmd)
    sh = remote.fromsocket(socket_)

    challRequest = sh.recvline_startswith("PoW")
    print(challRequest)
    solution = crackPow(challRequest.decode())
    sh.sendline(solution)

    imgs = []
    for round in range(1, 21):
        img = getRoundImg(sh)
        imgs.append(img)
    print("20 x img recv with set.size =", len(set(imgs)))

    hashs = list(map(lambda x: hashlib.sha256(x).hexdigest(), imgs))

    assert len(set(hashs)) == len(set(imgs)), "hash collision detected"
    """
    try a return
    """
    try:
        ret = []
        for i, (img, hash) in enumerate(zip(imgs, hashs)):
            ret.append(db[hash])
        sh.recvuntil("(Y/N): ")
        ans = "".join("Y" if x else "N" for x in ret)
        print("[SEND] = ", ans)
        sh.sendline(ans.encode())

        # TODO: check error
        result = sh.recvline(keepends=False).decode()
        print(result)
        if "Incorrect" in result:
            print("[Error round] = ", result)
        else:
            print("[SUCCESS!!!!!]")
            exit()
    except KeyError:
        for i, (img, hash) in enumerate(zip(imgs, hashs)):
            if hash in db:
                with open("{}/{}.png".format(cacheDir, hash), "rb") as f:
                    assert f.read() == img, "hash collision detected"
                continue
            else:
                with open("{}/{}.png".format(cacheDir, hash), "wb") as f:
                    f.write((img))
        checkRealImg()
        sh.close()

    # sh.interactive()


# main()
while True:
    try:
        main()
    except Exception as e:
        print(e)
    finally:
        print("Restarting...")
